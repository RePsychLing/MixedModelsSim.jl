var documenterSearchIndex = {"docs":
[{"location":"simulation/#Simulating-an-Experiment-from-Scratch","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"","category":"section"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"Here is a worked example of simulating a partially crossed design from scratch.","category":"page"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"First, some setup:","category":"page"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"using DataFrames\nusing MixedModels, MixedModelsSim\nusing Random","category":"page"},{"location":"simulation/#Assemble-the-Design","page":"Simulating an Experiment from Scratch","title":"Assemble the Design","text":"","category":"section"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"We're going to do a 2 x 2 x 2 design. For concreteness, let's think of this as a linguistic design:","category":"page"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"age old vs. young, between subjects\nfrequency high vs. low, between items\ncontext matched vs. unmatched, within both.","category":"page"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"Further, let's assume we want 40 subjects and 80 items. We can specify this design as follows:","category":"page"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"n_subj = 40\nn_item = 80\nsubj_btwn = Dict(:age => [\"old\", \"young\"])\nitem_btwn = Dict(:frequency => [\"high\", \"low\"])\nboth_win = Dict(:context => [\"matched\", \"unmatched\"])","category":"page"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"and then generate it:","category":"page"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"rng = MersenneTwister(42)  # specify our random number generator for reproducibility\ndesign = simdat_crossed(rng, n_subj, n_item;\n                        subj_btwn = subj_btwn,\n                        item_btwn = item_btwn,\n                        both_win = both_win)","category":"page"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"Note that simdat_crossed returns a row table, which MixedModels.jl can process directly. For nicely displaying it, we can again use pretty_table:","category":"page"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"pretty_table(first(design, 5))","category":"page"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"We can also convert it to a DataFrame and change the factors to use pooled arrays to save a bit of memory.","category":"page"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"df = pooled!(DataFrame(design))\nfirst(df, 5)","category":"page"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"Note that simdat_crossed generated a column dv for our dependent variable that has been pre-populated with noise from a standard normal distribution (N(01)). Typically, we will want to scale that, but we can do that in the simulation step. Also, this dependent variable is pure noise: we haven't yet added in effects. Adding in effects also comes in the simulation step.","category":"page"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"But before we get to simulating, let's fit the model to the noise, just to see how things look. We're going to use effects coding for our contrasts.","category":"page"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"contrasts = Dict(:age => EffectsCoding(base=\"young\"),\n                 :frequency => EffectsCoding(base=\"high\"),\n                 :context => EffectsCoding(base=\"matched\"))\nform = @formula(dv ~ 1 + age * frequency * context +\n                    (1 + frequency + context | subj) +\n                    (1 + age + context | item))\nm0 = fit(MixedModel, form, design; contrasts=contrasts)","category":"page"},{"location":"simulation/#Assemble-the-Random-Effects","page":"Simulating an Experiment from Scratch","title":"Assemble the Random Effects","text":"","category":"section"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"The hard part in simulating right now is specifying the random effects. We're working on making this bit easier, but you need to specify the variance-covariance matrix of the random effects. You can see what this looks like:","category":"page"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"vc = VarCorr(m0)","category":"page"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"For each grouping variable (subjects and items), there are two major components: the standard deviations ahd the correlations.","category":"page"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"For this example, we'll just assume all the correlations and thus the covariances are 0 in order to make things simple. Then we only have to worry about the standard deviations.","category":"page"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"Let's assume that the variability","category":"page"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"between items\nin the intercept is 1.3 times the residual variability\nin age is 0.35 times the residual variability\nin context is 0.75 times the residual variability\nbetween subjects\nin the intercept is 1.5 times the residual variability\nin frequency is 0.5 times the residual variability\nin context is 0.75 times the residual variability","category":"page"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"Note these are always specified relative to the residual standard deviation. In other words, we think about how big the between-subject and between-item differences are relative to the between-observation differences.","category":"page"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"We can now create the associated covariance matrices.[cholesky]","category":"page"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"[cholesky]: Technically, we're creating the lower Cholesky factor of these matrices, which is a bit like the matrix square root. In other words, we're creating the matrix form of standard deviations instead of the matrix form of the variances.]","category":"page"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"re_item = create_re(1.3, 0.35, 0.75)","category":"page"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"re_subj = create_re(1.5, 0.5, 0.75)","category":"page"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"We can check that we got these right by installing these parameter values into the model. Note that we have to specify them in the same order as in the output from VarCorr.","category":"page"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"update!(m0, re_item, re_subj)\nVarCorr(m0)","category":"page"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"Looks good. The values don't exactly match the values in our parameter vector because the residual standard deviation isn't exactly 1.0.","category":"page"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"For the actual simulation, we'll need the compact form of these covariance matrices that MixedModels.jl stores uses internally. This compact form is the parameter vector θ and we can get it back out of the model where we just installed it:","category":"page"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"θ = m0.θ","category":"page"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"Alternatively, we could also create it directly from the covariance matrices we created:","category":"page"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"vcat( flatlowertri(re_item), flatlowertri(re_subj) )","category":"page"},{"location":"simulation/#Assemble-the-Fixed-Effects","page":"Simulating an Experiment from Scratch","title":"Assemble the Fixed Effects","text":"","category":"section"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"The last two components we need are the residual variance and the effect sizes for the fixed effects.","category":"page"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"σ = 5\nβ = [1.0, -1.0, 2.0, -1.5, 0.3, -1.3, 1.4, 0]","category":"page"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"The entries in the β correspond to the coefficients in the model given by","category":"page"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"coefnames(m0)","category":"page"},{"location":"simulation/#Simulate","page":"Simulating an Experiment from Scratch","title":"Simulate","text":"","category":"section"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"Now we're ready to actually simulate our data. We can use parametricbootstrap to do this: the parametric bootstrap actually works by simulating new data from an existing model and then looking at how the estimates fit to that new data look. In MixedModels.jl, you can specify different parameter values, such as the ones  we made up for our fake data.","category":"page"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"# typically we would use a lot more simulations\n# but we want to be quick in this example\nsim = parametricbootstrap(MersenneTwister(12321), 20, m0; β=β, σ=σ, θ=θ)","category":"page"},{"location":"simulation/#See-your-power-and-profit!","page":"Simulating an Experiment from Scratch","title":"See your power and profit!","text":"","category":"section"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"Finally, we can turn this into a power table:","category":"page"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"ptbl = power_table(sim)","category":"page"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"For nicely displaying it, we can again use pretty_table:","category":"page"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"pretty_table(ptbl)","category":"page"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"We can of course convert the row table into a DataFrame:","category":"page"},{"location":"simulation/","page":"Simulating an Experiment from Scratch","title":"Simulating an Experiment from Scratch","text":"DataFrame(ptbl)","category":"page"},{"location":"#MixedModelsSim.jl","page":"MixedModelsSim.jl","title":"MixedModelsSim.jl","text":"","category":"section"},{"location":"","page":"MixedModelsSim.jl","title":"MixedModelsSim.jl","text":"","category":"page"},{"location":"","page":"MixedModelsSim.jl","title":"MixedModelsSim.jl","text":"Modules = [MixedModelsSim]","category":"page"},{"location":"#MixedModelsSim.create_re-Tuple","page":"MixedModelsSim.jl","title":"MixedModelsSim.create_re","text":"create_re(sigmas...; corrmat=Matrix{Float64}(I, length(sigmas), length(sigmas))\n\nCreate the covariance factor for a random effect from the standard deviations and correlation matrix.\n\nThe sigmas should be specified in the same order as the random slopes in the output of VarCorr(m).\n\nThe correlation matrix defaults to the identiy matrix, i.e. no correlation between random effects.\n\nnote: Note\nThe return value is the lower Cholesky factor of the covariance matrix, which is what update! requires.\n\n\n\n\n\n","category":"method"},{"location":"#MixedModelsSim.cyclicshift-Tuple{AbstractVector{T} where T, Any}","page":"MixedModelsSim.jl","title":"MixedModelsSim.cyclicshift","text":"cyclicshift(v::AbstractVector, nrow)\n\nReturn an eltype(v) matrix of size nrow by length(v) with each column consisting of v followed by a cyclic shift of v followed by ...\n\ncyclicshift('a':'d', 8)\n\n\n\n\n\n","category":"method"},{"location":"#MixedModelsSim.factorproduct-Tuple","page":"MixedModelsSim.jl","title":"MixedModelsSim.factorproduct","text":"factorproduct(facs...)\n\nReturn a Vector{NamedTuple} obtained by crossing facs....\n\nThe arguments should be coerceable to a Tables.RowTable with rowtable.\n\nThe value is a Tables.RowTable and hence can be converted to a DataFrame.\n\nExample\n\njulia> DataFrame(factorproduct((item=nlevels(3,'I'),), (subj=nlevels(5), age=[\"Y\",\"Y\",\"Y\",\"O\",\"O\"])))\n15×3 DataFrame\n│ Row │ item   │ subj   │ age    │\n│     │ String │ String │ String │\n├─────┼────────┼────────┼────────┤\n│ 1   │ I1     │ S1     │ Y      │\n│ 2   │ I2     │ S1     │ Y      │\n│ 3   │ I3     │ S1     │ Y      │\n│ 4   │ I1     │ S2     │ Y      │\n│ 5   │ I2     │ S2     │ Y      │\n│ 6   │ I3     │ S2     │ Y      │\n│ 7   │ I1     │ S3     │ Y      │\n│ 8   │ I2     │ S3     │ Y      │\n│ 9   │ I3     │ S3     │ Y      │\n│ 10  │ I1     │ S4     │ O      │\n│ 11  │ I2     │ S4     │ O      │\n│ 12  │ I3     │ S4     │ O      │\n│ 13  │ I1     │ S5     │ O      │\n│ 14  │ I2     │ S5     │ O      │\n│ 15  │ I3     │ S5     │ O      │\n\n\n\n\n\n","category":"method"},{"location":"#MixedModelsSim.flatlowertri-Tuple{LinearAlgebra.LowerTriangular}","page":"MixedModelsSim.jl","title":"MixedModelsSim.flatlowertri","text":"flatlowertri(::LowerTriangular)\n\nReturns the lower triangular flattened into 1D array in column-major order.\n\n\n\n\n\n","category":"method"},{"location":"#MixedModelsSim.nlevels","page":"MixedModelsSim.jl","title":"MixedModelsSim.nlevels","text":"nlevels(nlev, tag='S')\n\nReturn a Vector{String} of tag followed by 1:nlev left-padded with zeros\n\nExamples\n\njulia> show(nlevels(10))\n[\"S01\", \"S02\", \"S03\", \"S04\", \"S05\", \"S06\", \"S07\", \"S08\", \"S09\", \"S10\"]\n\n\n\n\n\n","category":"function"},{"location":"#MixedModelsSim.pooled!","page":"MixedModelsSim.jl","title":"MixedModelsSim.pooled!","text":"pooled!(df, cols::Type=Union{AbstractString,Missing})\n\nLike DataFrames.categorical! but converting columns to PooledArrays\n\nwarning: Warning\nThis method is not type-specific in the first argument order to eliminate a dependency on DataFrames.jl. It nonetheless expects a DataFrame as its first argument\n\n\n\n\n\n","category":"function"},{"location":"#MixedModelsSim.power_table","page":"MixedModelsSim.jl","title":"MixedModelsSim.power_table","text":"power_table(sim, alpha = 0.05)\n\nReturns a row table with fields coefname and power  based on the proportion of simulated p-values less than alpha, for sim, the output of parametricbootstrap.\n\n\n\n\n\n","category":"function"},{"location":"#MixedModelsSim.simdat_crossed-Tuple","page":"MixedModelsSim.jl","title":"MixedModelsSim.simdat_crossed","text":"simdat_crossed([RNG], subj_n, item_n;\n               subj_btwn=nothing, item_btwn=nothing, both_win=nothing,\n               subj_prefix=\"S\", item_prefix=\"I\")\n\nReturn a row table with a design specified by the:\n\nnumber of subjects (subj_n),\nnumber of items (item_n)\nbetween-subject factors (subj_btwn)\nbetween-item factors (item_btwn)\nwithin-subject/item factors (both_win)\n\nIf a factor is both between-subject and between-item, put it in both subj_btwn and item_btwn with the same keys and the same levels.\n\nFactors should be specified as dictionaries in the following format:\n\nDict(\n    :factor1_name => [\"F1_level1\", \"F1_level2\"],\n    :factor2_name => [\"F2_level1\", \"F2_level2\", \"F2_level3\"]\n)\n\nIn addition to design, the rowtable contains a field dv pre-populated with N(0,1) noise as a basis for further simulating a design.\n\nnote: Note\nThe number of subjects/items must divide the number of combinations of between subject/item factor levels. In other words, this function assumes a balanced design and will throw an error if that is not possible.\n\n\n\n\n\n","category":"method"},{"location":"#MixedModelsSim.update!-Tuple{MixedModels.LinearMixedModel}","page":"MixedModelsSim.jl","title":"MixedModelsSim.update!","text":"update!(m::MixedModel; θ)\n\nUpdate the mixed model to use θ as its new parameter vector.\n\nnote: Note\nThis is a convenience function for installing a particular parameter vector and the resulting model fit. It does not actually perform any type of optimization.\n\nnote: Note\nFor GLMMs, this only sets θ and not β, even for fast=false fits.\n\n\n\n\n\n","category":"method"},{"location":"#MixedModelsSim.update!-Tuple{MixedModels.MixedModel, Vararg{Any, N} where N}","page":"MixedModelsSim.jl","title":"MixedModelsSim.update!","text":"update!(m::MixedModel, re...)\n\nUpdate the mixed model to use the random-effects covariance matrices.\n\nThe re can be created using create_re.\n\nThey should be specified in the order specified in VarCorr(m).\n\nDetails\n\nThe re used as the λ fields of the model's ReTerms and should be specified as the lower Cholesky factor of covariance matrices.\n\n\n\n\n\n","category":"method"}]
}
